{"version":3,"sources":["Upload.js","Results.js","sample.png","Sample.js","Display.js","App.js","reportWebVitals.js","index.js"],"names":["Upload","props","useState","selectedFile","setSelectedFile","isSelected","setIsSelected","fileTypeErrorMessage","setFileTypeErrorMessage","type","name","onChange","e","target","files","size","lastModifiedDate","toLocaleDateString","onClick","formData","FormData","append","axios","post","headers","then","res","data","message","updateResult","updateIsFileUploaded","catch","error","console","Results","results","Object","entries","names","map","ele","dates","Sample","src","SampleImg","alt","Display","setResults","isFileUploaded","setIsFileUploaded","className","Title","RefreshBtn","window","location","reload","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAIe,SAASA,EAAOC,GAC3B,MAAwCC,qBAAxC,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAwDJ,mBAAS,MAAjE,mBAAOK,EAAP,KAA6BC,EAA7B,KA4BA,OACI,gCACI,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,SA5BjB,SAACC,GACnBR,EAAgBQ,EAAEC,OAAOC,MAAM,IAC/BR,GAAc,MA2BTD,EACG,gCACI,2CAAcF,EAAaO,QAC3B,2CAAcP,EAAaM,QAC3B,gDAAmBN,EAAaY,QAChC,kDACsB,IACjBZ,EAAaa,iBAAiBC,2BAIvC,8DAEJ,8BACI,wBAAQC,QAtCK,WACrB,IAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQlB,GACxBmB,IAAMC,KAAK,UAAWJ,EAAU,CAC5BK,QAAS,CACL,eAAgB,yBAGvBC,MAAK,SAACC,GACCA,EAAIC,KAAKC,QACTpB,EAAwBkB,EAAIC,KAAKC,UAEjC3B,EAAM4B,aAAaH,EAAIC,MACvB1B,EAAM6B,sBAAqB,OAGlCC,OAAM,SAACC,GACJC,QAAQD,MAAM,SAAUA,OAqBpB,uBAEJ,8BAAMzB,GAAwBA,OC9C3B,SAAS2B,EAAQjC,GAE5B,IAAMkC,EAAUlC,EAAMkC,QAItB,OACI,oCACI,gFAOA,uCAGKA,GAAWC,OAAOC,QAAQF,EAAQG,OAAOC,KAAI,SAAAC,GAAG,OAC7C,4BAAIA,OAEZ,uCAGCL,GAAWC,OAAOC,QAAQF,EAAQM,OAAOF,KAAI,SAAAC,GAAG,OACzC,4BAAIA,UCjCT,UAA0B,mCCE1B,SAASE,IAIpB,OACI,8BACI,qBAAKC,IAAKC,EAAWC,IAAI,OCUtB,SAASC,IAEpB,MAA8B5C,mBAAS,MAAvC,mBAAOiC,EAAP,KAAgBY,EAAhB,KACA,EAAwD7C,mBAAS,MAAjE,mBACA,GADA,UAC4CA,oBAAS,IAArD,mBAAO8C,EAAP,KAAuBC,EAAvB,KAUA,OACI,oCACI,+BACMD,GACE,cAAChD,EAAD,CACI6B,aAbpB,SAAsBF,GAClBoB,EAAWpB,IAaKG,qBAVpB,SAA8BH,GAC1BsB,EAAkBtB,QAad,8BACKqB,GACG,0BAASE,UAAU,yBAAnB,UACI,cAAChB,EAAD,CAASC,QAASA,IAClB,cAACO,EAAD,YCzCxB,SAASS,IACP,OACE,8BACE,kDAKN,SAASC,IAIP,OACE,8BACE,wBAAQ3C,KAAK,SAASS,QAAS,WAJjCmC,OAAOC,SAASC,UAId,gCAmBSC,MAZf,WACE,OACE,sBAAKN,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,cAAEC,EAAF,IACA,cAAEC,EAAF,OAEF,cAAE,EAAF,QCrBSK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.92f897a3.chunk.js","sourcesContent":["\nimport React, {useState} from 'react';\nimport axios from \"axios\";\n\nexport default function Upload(props) {\n    const [selectedFile, setSelectedFile] = useState()\n    const [isSelected, setIsSelected] = useState(false)\n    const [fileTypeErrorMessage, setFileTypeErrorMessage] = useState(null)\n\n    const changeHandler = (e) => {\n        setSelectedFile(e.target.files[0])\n        setIsSelected(true)\n    }\n\n    const handleSubmission = () => {\n        const formData = new FormData()\n        formData.append('File', selectedFile)\n        axios.post('/upload', formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        })\n        .then((res) => {\n            if (res.data.message) {\n                setFileTypeErrorMessage(res.data.message)\n            } else {\n                props.updateResult(res.data)\n                props.updateIsFileUploaded(true)\n            }\n        })\n        .catch((error) => {\n            console.error('Error:', error);\n        });\n    }\n \n    return (\n        <div>\n            <input type=\"file\" name=\"file\" onChange={changeHandler} />\n            {isSelected ? (\n                <div>\n                    <p>Filename: {selectedFile.name}</p>\n                    <p>Filetype: {selectedFile.type}</p>\n                    <p>Size in bytes: {selectedFile.size}</p>\n                    <p>\n                        lastModifiedDate:{' '}\n                        {selectedFile.lastModifiedDate.toLocaleDateString()}\n                    </p>\n                </div>\n            ) : (\n                <p>Select a file to show details</p>\n            )}\n            <div>\n                <button onClick={handleSubmission}> Upload</button>\n            </div>\n            <div>{fileTypeErrorMessage && fileTypeErrorMessage}</div>\n        </div>\n    )\n\n\n}","// import axios from \"axios\";\n// import { Component } from \"react\";\n\n\n// import { useContext } from 'react'\n// import { FormContext } from './FormContext.js'\n\n\nexport default function Results(props) {\n\n    const results = props.results\n\n\n\n    return (\n        <section>\n            <h3>\n                {//hard coded\n                }\n            File Detected: Titles Registry Form 1 Transfer\n\n            </h3>\n\n            <h3>\n                names\n            </h3>\n                {results && Object.entries(results.names).map(ele => \n                    <p>{ele}</p>\n                )}\n            <h3>\n                dates\n            </h3>\n            {results && Object.entries(results.dates).map(ele => \n                    <p>{ele}</p>\n                )}\n        </section>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/sample.6a280af7.png\";","import SampleImg from './sample.png'\n\nexport default function Sample() {\n\n\n\n    return (\n        <div>\n            <img src={SampleImg} alt=\"\" />\n        </div>\n    )\n}","import './Display.css'\n\n\nimport Upload from './Upload.js'\nimport Results from './Results.js'\nimport Sample from './Sample.js'\n\n\nimport { useState } from 'react'\n\n// import { useContext } from 'react'\n// import { FormContext } from './FormContext.js'\n\n\n// import axios from \"axios\";\n\n\n\nexport default function Display() {\n\n    const [results, setResults] = useState(null)\n    const [fileTypeErrorMessage, setFileTypeErrorMessage] = useState(null)\n    const [isFileUploaded, setIsFileUploaded] = useState(false)\n\n    function updateResult(data) {\n        setResults(data)\n    }\n    \n    function updateIsFileUploaded(data) {\n        setIsFileUploaded(data)\n    }\n\n    return (\n        <section>\n            <div> \n                {!isFileUploaded && \n                    <Upload \n                        updateResult={updateResult} \n                        updateIsFileUploaded={updateIsFileUploaded} \n                    />\n                }\n            </div>\n            <div>\n                {isFileUploaded &&\n                    <section className=\"results-sample-wrapper\">\n                        <Results results={results} />\n                        <Sample />\n                    </section>\n                }\n            </div>\n        </section>\n    )\n}","import './App.css';\nimport Display from './Display.js'\n\n\n\nfunction Title(){\n  return (\n    <div>\n      <h2>Form Validator</h2>\n    </div>\n  )\n}\n\nfunction RefreshBtn() {\n  function refreshPage() {\n    window.location.reload()\n  } \n  return (\n    <div>\n      <button type=\"submit\" onClick={() => refreshPage()}>Refresh/New File</button>\n    </div>\n  )\n}\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        < Title />\n        < RefreshBtn />\n      </div>\n      < Display />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}